specification {
    element person {
        style {
            shape person
            color green
        }
    }
    element softwareSystem
    element container
    element component
}

model {
  user = person "Пользователь" "Пользователь ToDo List"

  todoList = softwareSystem "ToDo List" {
    apiGateway = container "API Gateway" {
      description "Маршрутизация запросов и управление доступом"
      technology "Node.js, Express"
    }

    webapp = container "Веб-приложение" "Предоставляет интерфейс ToDo List" "JavaScript, React"

    userService = container "User Service" {
      description "Управление пользователями и аутентификация"
      technology "Java, Spring Boot"
      
      component userController "User Controller" "Обрабатывает HTTP запросы"
      component authService "Auth Service" "Управляет аутентификацией"
      component userServiceComponent "User Service" "Управляет данными пользователей"
      component userRepository "User Repository" "Доступ к данным пользователей"
      component kafkaProducer "Kafka Producer" "Отправляет события пользователей"
      component grpcService "gRPC Service" "Предоставляет gRPC API"
    }

    taskService = container "Task Service" {
      description "Управление задачами и списками"
      technology "Python, FastAPI"
    }

    analyticsService = container "Analytics Service" {
      description "Сбор и анализ статистики использования"
      technology "Scala, Akka"
    }

    notificationService = container "Notification Service" {
      description "Отправка уведомлений пользователям"
      technology "Node.js, Express"
    }

    reminderService = container "Reminder Service" {
      description "Управление напоминаниями о задачах"
      technology "Go"
    }

    postgresDb = container "PostgreSQL" {
      description "Хранение данных пользователей"
      technology "Database"
      style {
        shape cylinder
      }
    }

    mongoDb = container "MongoDB" {
      description "Хранение задач и списков"
      technology "Database"
    }

    cassandraDb = container "Cassandra" {
      description "Хранение аналитических данных"
      technology "Database"
      style {
        shape cylinder
      }
    }

    redis = container "Redis" {
      description "Кэширование и хранение сессий"
      technology "In-memory data store"
    }

    kafka = container "Kafka" {
      description "Обмен событиями между сервисами"
      technology "Message Broker"
      style {
        shape queue
      }
    }
  }

  user -> todoList.apiGateway "Использует" "HTTPS"
  todoList.apiGateway -> todoList.webapp "Перенаправляет" "HTTPS"
  todoList.apiGateway -> todoList.userService "Маршрутизирует" "JSON/HTTPS"
  todoList.apiGateway -> todoList.taskService "Маршрутизирует" "JSON/HTTPS"
  todoList.apiGateway -> todoList.analyticsService "Маршрутизирует" "JSON/HTTPS"
  todoList.apiGateway -> todoList.notificationService "Маршрутизирует" "JSON/HTTPS"
  todoList.apiGateway -> todoList.reminderService "Маршрутизирует" "JSON/HTTPS"

  todoList.userService -> todoList.postgresDb "Читает/Пишет" "SQL"
  todoList.taskService -> todoList.mongoDb "Читает/Пишет" "MongoDB Protocol"
  todoList.analyticsService -> todoList.cassandraDb "Читает/Пишет" "CQL"
  todoList.apiGateway -> todoList.redis "Кэширует" "Redis Protocol"

  todoList.userService -> todoList.kafka "Публикует/Подписывается" "user_events"
  todoList.taskService -> todoList.kafka "Публикует/Подписывается" "task_events"
  todoList.analyticsService -> todoList.kafka "Подписывается" "user_events, task_events"
  todoList.notificationService -> todoList.kafka "Подписывается" "user_events, task_events"
  todoList.reminderService -> todoList.kafka "Подписывается" "task_events"

  todoList.userService -> todoList.taskService "Взаимодействует" "gRPC"
  todoList.userService -> todoList.analyticsService "Взаимодействует" "gRPC"
  todoList.taskService -> todoList.analyticsService "Взаимодействует" "gRPC"
  todoList.taskService -> todoList.notificationService "Взаимодействует" "gRPC"
  todoList.taskService -> todoList.reminderService "Взаимодействует" "gRPC"

  todoList.userService.userController -> todoList.userService.authService "Использует"
  todoList.userService.userController -> todoList.userService.userServiceComponent "Использует"
  todoList.userService.authService -> todoList.userService.userServiceComponent "Использует"
  todoList.userService.userServiceComponent -> todoList.userService.userRepository "Использует"
  todoList.userService.userServiceComponent -> todoList.userService.kafkaProducer "Использует"
  todoList.userService.grpcService -> todoList.userService.userServiceComponent "Использует"
}

views {
   view index {
        include *
    }
}
